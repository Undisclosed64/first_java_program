In java, everything we write would be in classes. Every file that ends with .java is a class. Class is basically named group of properties and functions.

Two conventions to follow:
1. Class should start with capital letter.
2. If the name of the file is Main.java then the main class should be a public class. In simple terms public means that this 
class can be accessed from anywhere like from other classes, other files or other packages.

1. Public means the class can be accessed from anywhere.

2. main function in code: the word main is reserved. The function name has to be main only. Whenever we run java file, it will look for main function only. If the main funcion is not there,the program will not run. main function is the entry point of java program.

3. static: Usually in classes when you use the variable names or functions, in order to use that we have to create an object of the class. 
But some variables like population does not depend on objects. If we have to run the main function without creating an object of the class, then in that case we use static keyoword.

4.void: it's the return type of the function. In case of integars, return type will be integar. In case of string, return type would be string. In case of the example, we dont want it to give any return value, hence we use void.

5. String[] args: these are known as command line arguments. Whatever argument you give in command line, as an array it will be stored in String[]. 

6. javac -d: with this command, we can change the location of our byte file.

Commands are just executable files located somewhere in our computer. It just double clicks that file when we run a command.

7. Environment Variable PATH: when we type a command like git or javac my computer should know where this executable file is located. It does that via PATH variables and env variables.
ENV variable is just a list of folder addresses where computer will check if the command you have written is available or not.

8. Shortcuts: psvm for public static void main and sout for output.

9. Packages are basically just folders. If it says com.Kunal, it means there's a com folder and insde it there's kunal folder.
. means just subfolder
.kunal means kunal is a folder inside com folder.

8.  System.out.println: As we know everything in java is a class. System is also a class as it starts with captal S. 
println is a function to print something. System has many other useful functions. 

System has a variable called out which is of type PrintStream and out has a method called println. Since out is of type PrintStream, println is also in PrintStream. out is like a reference variable for this PrintStream.

By default value of out stream is command line. You can change it's value to a file an dthen it will print in that file instead of command line.

PrintStream is basically priting in a stream.

9. Inputs: For output we had System class which had methods in it. Similarly for input we have Scanner class.

With Scanner class, we can take inputs in Java.
We create a new Scanner object and in the Scanner object we need to pass where we are taking the input from. 
System.in means standard input stream which refers to our keyboard. By default the value of out and in of System are null.
We can modify in value to a file so that it will add input value in that file.


10. Primitives: primitive is any data that can't be broken further. Example is integar or character. Some data types are:

       int rollno = 1; //size 4 byte
       char letter = 'A';
       float marks = 56.76f; //size 4 byte
       double largeDecimalNumbers = 8477466.877; ////size 8 byte
       long largeInteger = 8887665555L; ////size 8 byte
       boolean check = true;

 Why adding f and L in float and long.
 By default all decimals are of type double, so to store a decimal into float, we need to speciify f.
 By default all integers are of type int, so to store in long we need to specify L.

11. Literals and identifiers: In simple words, Literals in Java is a synthetic representation of boolean, numeric, character, or string data. 

// Here 100 is a constant/literal.
int x = 100; 

referenece variable is called identifier.